#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_types.h"
#include "inc/hw_memmap.h"
#include "inc/hw_gpio.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/timer.h"
#include "driverlib/interrupt.h"
#include "driverlib/pin_map.h"
#include "inc/hw_ints.h"

// Variables globales
uint32_t g_ui32SysClock;  // Reloj del sistema

// Frecuencia del temporizador (FS) en función de la frecuencia de reloj
uint32_t FS = 120000000 * 1;  // 1 segundo de interrupción, cambiar a 2 o 5 si se requiere

//*****************************************************************************
// Función de interrupción para el temporizador 0 (Timer0A Handler)
//*****************************************************************************
void timer0A_handler(void)
{
    // Limpiar la interrupción del temporizador
    TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);

    // Alternar el LED conectado a PF1
    GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, ~GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_1));
}

//*****************************************************************************
// Configuración del temporizador y habilitación de interrupciones
//*****************************************************************************
int main(void)
{
    // Configuración del reloj del sistema a 120 MHz
    g_ui32SysClock = SysCtlClockFreqSet((SYSCTL_XTAL_25MHZ | SYSCTL_OSC_MAIN | SYSCTL_USE_PLL | SYSCTL_CFG_VCO_240), 120000000);

    // Habilitar el puerto GPIO para el LED
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1);  // Configurar PF1 como salida para el LED

    // Habilitar el periférico del temporizador 0
    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);

    // Configurar el temporizador 0 como periódico
    TimerConfigure(TIMER0_BASE, TIMER_CFG_PERIODIC);
    TimerLoadSet(TIMER0_BASE, TIMER_A, FS);  // Configurar el temporizador para 1 segundo (FS)

    // Habilitar las interrupciones del procesador
    IntMasterEnable();

    // Habilitar la interrupción de Timer0
    IntEnable(INT_TIMER0A);
    TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);  // Habilitar la interrupción por tiempo de espera del temporizador

    // Habilitar el temporizador 0
    TimerEnable(TIMER0_BASE, TIMER_A);

    // Bucle principal (vacío porque todo se maneja en la interrupción)
    while(1)
    {
        // El trabajo ocurre en la interrupción, el bucle principal está vacío
    }
}
